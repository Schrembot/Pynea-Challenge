enum SortOrder {
  asc
  desc
}
input Sort {
  firstName: SortOrder
  lastName: SortOrder
  email: SortOrder
  createdAt: SortOrder
}
input Filter {
  equals: String
  in: [String]
  notIn: [String]
  lt: String
  lte: String
  gt: String
  gte: String
  contains: String
  startsWith: String
  endsWith: String
}
input Where {
  firstName: Filter
  lastName: Filter
  email: Filter
}

type User {
  id: ID!
  firstName: String!
  lastName: String!
  email: String!
  password: String!
  deleted: Boolean!
  createdAt: String!
  updatedAt: String!
}

input NewUser {
  firstName: String!
  lastName: String!
  email: String!
  password: String!
}

input UpdateUser {
  firstName: String
  lastName: String
  email: String
  password: String
}

type Query {
  getUser(id: ID!): User
  listUsers(sort: [Sort!], where: [Where!]): [User!]!
}

type Mutation {
  createUser(data: NewUser): User!
  updateUser(id: String, data: UpdateUser): User
  deleteUser(id: String): User
}
